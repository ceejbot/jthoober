{
    "bitwise"       : false,    // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : false,    // Require {} for every new block or scope.
    "eqeqeq"        : false,    // Require triple equals i.e. `===`.
    "forin"         : true,     // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,    // Prohibit variable use before definition.
    "newcap"        : false,     // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
    "noempty"       : true,     // Prohibit use of empty blocks.
    "nonew"         : false,     // Prohibit use of constructors for side-effects.
    "plusplus"      : false,    // Prohibit use of `++` & `--`.
    "regexp"        : false,    // Prohibit `.` and `[^...]` in regular expressions.
    "undef"         : true,     // Require all non-global variables be declared before they are used.
    "strict"        : false,    // Require `use strict` pragma in every file.
    "trailing"      : false,    // Prohibit trailing whitespaces.


    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss"          : true,     // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,    // Tolerate use of `== null`.
    "esnext"        : true,    // Allow ES.next specific features such as `const` and `let`.
    "evil"          : false,    // Tolerate use of `eval`.
    "expr"          : true,     // Tolerate `ExpressionStatement` as Programs.
    "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict"  : false,    // Allow global "use strict" (also enables 'strict').
    "iterator"      : false,    // Allow usage of __iterator__ property.
    "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : true,     // Suppress warnings about comma-first coding style.
    "loopfunc"      : false,    // Allow functions to be defined within loops.
    "multistr"      : false,    // Tolerate multi-line strings.
    "onecase"       : false,    // Tolerate switches with just one case.
    "proto"         : false,    // Tolerate __proto__ property. This property is deprecated.
    "regexdash"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : false,    // Tolerate script-targeted URLs.
    "smarttabs"     : true,     // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub"           : true,     // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.
    "validthis"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

    "browser"       : false,     // Standard browser globals e.g. `window`, `document`.
    "node"          : true,     // Enable globals available when code is running inside of the NodeJS runtime environment.

    "maxerr"        : 100,      // Maximum errors before stopping.
    "predef"        : [         // Extra globals.
        //"exampleVar",
        //"anotherCoolGlobal",
        //"iLoveDouglas"
    ],
    "indent"        : 4         // Specify indentation spacing
}
